// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CreateBeast(ctx context.Context, arg CreateBeastParams) (ScryQuestBestiary, error)
	CreateClass(ctx context.Context, arg CreateClassParams) (ScryQuestClass, error)
	CreateSpecies(ctx context.Context, arg CreateSpeciesParams) (ScryQuestSpecy, error)
	CreateSpell(ctx context.Context, arg CreateSpellParams) (ScryQuestSpell, error)
	DeleteBeast(ctx context.Context, id pgtype.UUID) error
	DeleteClass(ctx context.Context, id pgtype.UUID) error
	DeleteSpecies(ctx context.Context, id pgtype.UUID) error
	DeleteSpell(ctx context.Context, id pgtype.UUID) error
	GetBeastByID(ctx context.Context, id pgtype.UUID) (ScryQuestBestiary, error)
	GetBeastByName(ctx context.Context, name string) (ScryQuestBestiary, error)
	GetClassByID(ctx context.Context, id pgtype.UUID) (ScryQuestClass, error)
	GetClassByName(ctx context.Context, name string) (ScryQuestClass, error)
	GetSpeciesByID(ctx context.Context, id pgtype.UUID) (ScryQuestSpecy, error)
	GetSpeciesByName(ctx context.Context, name string) (ScryQuestSpecy, error)
	GetSpellByID(ctx context.Context, id pgtype.UUID) (ScryQuestSpell, error)
	GetSpellByName(ctx context.Context, name string) (ScryQuestSpell, error)
	ListBeasts(ctx context.Context, arg ListBeastsParams) ([]ScryQuestBestiary, error)
	ListBeastsByChallengeRating(ctx context.Context, challengeRating pgtype.Text) ([]ScryQuestBestiary, error)
	ListBeastsByType(ctx context.Context, type_ pgtype.Text) ([]ScryQuestBestiary, error)
	ListClasses(ctx context.Context, arg ListClassesParams) ([]ScryQuestClass, error)
	ListSpecies(ctx context.Context, arg ListSpeciesParams) ([]ScryQuestSpecy, error)
	ListSpells(ctx context.Context, arg ListSpellsParams) ([]ScryQuestSpell, error)
	ListSpellsByLevel(ctx context.Context, level int32) ([]ScryQuestSpell, error)
	ListSpellsBySchool(ctx context.Context, school pgtype.Text) ([]ScryQuestSpell, error)
	SearchBeastsByEmbedding(ctx context.Context, arg SearchBeastsByEmbeddingParams) ([]SearchBeastsByEmbeddingRow, error)
	SearchClassesByEmbedding(ctx context.Context, arg SearchClassesByEmbeddingParams) ([]SearchClassesByEmbeddingRow, error)
	SearchSpeciesByEmbedding(ctx context.Context, arg SearchSpeciesByEmbeddingParams) ([]SearchSpeciesByEmbeddingRow, error)
	SearchSpellsByEmbedding(ctx context.Context, arg SearchSpellsByEmbeddingParams) ([]SearchSpellsByEmbeddingRow, error)
	UpdateBeastEmbedding(ctx context.Context, arg UpdateBeastEmbeddingParams) error
	UpdateClassEmbedding(ctx context.Context, arg UpdateClassEmbeddingParams) error
	UpdateSpeciesEmbedding(ctx context.Context, arg UpdateSpeciesEmbeddingParams) error
	UpdateSpellEmbedding(ctx context.Context, arg UpdateSpellEmbeddingParams) error
}

var _ Querier = (*Queries)(nil)
